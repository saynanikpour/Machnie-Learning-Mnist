import numpy as np
import matplotlib.pyplot as plt
from tensorflow.keras.datasets import mnist

# الف: فراخوانی مجموعه داده MNIST و گزارش ابعاد داده‌های آموزش و آزمون
(x_train, y_train), (x_test, y_test) = mnist.load_data()


print("Dimensions of training data:")
print("Number of samples:", x_train.shape[0])
print("Dimensions of each image:", x_train.shape[1:])


print("\nDimensions of testing data:")
print("Number of samples:", x_test.shape[0])
print("Dimensions of each image:", x_test.shape[1:])

# ب: نمایش یک نمونه از هر کلاس
classes = np.unique(y_train)
plt.figure(figsize=(10, 5))
for i, cls in enumerate(classes):
    sample_image = x_train[y_train == cls][0]
    plt.subplot(2, 5, i+1)
    plt.imshow(sample_image, cmap='gray')
    plt.title(f"Class: {cls}")
    plt.axis('off')
plt.show()

# ج: رسم نمودار هیستوگرام برای تعداد نمونه‌های هر کلاس در داده‌های آموزش و آزمون
plt.figure(figsize=(10, 5))
plt.hist(y_test, bins=len(classes), alpha=0.5, label='Test', color='blue')
plt.hist(y_train, bins=len(classes), alpha=0.5, label='Train', color='green')
plt.title('Histogram of Class Distribution')
plt.xlabel('Class')
plt.ylabel('Frequency')
plt.legend()
plt.show()

# د: اسکیل کردن داده‌ها به بازه [0, 1]
x_train = (x_train - np.min(x_train)) / (np.max(x_train) - np.min(x_train))
x_test = (x_test - np.min(x_test)) / (np.max(x_test) - np.min(x_test))

# یا x_train /= 255.0 و x_test /= 255.0 را هم می‌توان به جای محاسبه دوباره انجام داد.
#train_images_normalized = x_train / 255.0
#test_images_normalized = x_test / 255.0
